const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function main() {
  const users = await prisma.user.createMany({
    data: [
      {
        name: "Steve Fox",
        email: "Steve@mail.com",
        phoneNumber: "+621234567890",
        password: "123456",
        isActive: false,
      },
      {
        name: "Reina Mishima",
        email: "Reina@mail.com",
        phoneNumber: "+621234567891",
        password: "654321",
        isActive: false,
      },
      {
        name: "Mark Smith",
        email: "mark@mail.com",
        phoneNumber: "+621234567892",
        password: "abcdef",
        isActive: false,
      },
      {
        name: "Bryan Fury",
        email: "Bryan@mail.com",
        phoneNumber: "+621234567893",
        password: "ghijkl",
        isActive: false,
      },
      {
        name: "Claudio Serafino",
        email: "serafino@mail.com",
        phoneNumber: "+639876463784",
        password: "900673",
        isActive: false,
      },
      {
        name: "Jin Kazama",
        email: "jin@mail.com",
        phoneNumber: "+621234567894",
        password: "jin123",
        isActive: false,
      },
      {
        name: "Ling Xiaoyu",
        email: "xiaoyu@mail.com",
        phoneNumber: "+621234567895",
        password: "xiaoyu456",
        isActive: false,
      },
      {
        name: "Hwoarang sero",
        email: "hwoarang@mail.com",
        phoneNumber: "+621234567896",
        password: "hwoarang789",
        isActive: false,
      },
      {
        name: "Paul Phoenix",
        email: "paul@mail.com",
        phoneNumber: "+621234567897",
        password: "paul555",
        isActive: false,
      },
      {
        name: "Nina Williams",
        email: "nina@mail.com",
        phoneNumber: "+621234567898",
        password: "nina333",
        isActive: false,
      },
      {
        name: "Asuka Kazama",
        email: "asuka@mail.com",
        phoneNumber: "+621234567899",
        password: "asuka111",
        isActive: false,
      },
      {
        name: "Kazuya Mishima",
        email: "kazuya@mail.com",
        phoneNumber: "+621234567900",
        password: "kazuya666",
        isActive: false,
      },
      {
        name: "Heihachi Mishima",
        email: "heihachi@mail.com",
        phoneNumber: "+621234567901",
        password: "heihachi777",
        isActive: false,
      },
      {
        name: "Lars Alexandersson",
        email: "lars@mail.com",
        phoneNumber: "+621234567902",
        password: "lars888",
        isActive: false,
      },
      {
        name: "Alisa Bosconovitch",
        email: "alisa@mail.com",
        phoneNumber: "+621234567903",
        password: "alisa999",
        isActive: false,
      },
    ],
  });
  console.log("Users created:", users);

  const notifications = await prisma.notification.createMany({
    data: [
      {
        userId: 1,
        name: "Reminder 1",
        detail: "Your flight is scheduled on 2025-01-04 at 07:30 AM.",
      },
      {
        userId: 2,
        name: "Reminder 2",
        detail: "Your flight is scheduled on 2025-02-01 at 10:00 AM.",
      },
      {
        userId: 3,
        name: "Reminder 3",
        detail: "Your flight is scheduled on 2025-03 at 09:00 AM.",
      },
      {
        userId: 4,
        name: "Reminder 4",
        detail: "Your flight is scheduled on 2025-04-01 at 13:00 AM.",
      },
      {
        userId: 5,
        name: "Reminder 5",
        detail: "Your flight is scheduled on 2025-05-20 at 05:30 AM.",
      },
      {
        userId: 6,
        name: "Reminder 6",
        detail: "Your flight is scheduled on 2025-06-15 at 11:45 AM.",
      },
      {
        userId: 7,
        name: "Reminder 7",
        detail: "Your flight is scheduled on 2025-07-10 at 08:15 AM.",
      },
      {
        userId: 8,
        name: "Reminder 8",
        detail: "Your flight is scheduled on 2025-08-05 at 14:00 PM.",
      },
      {
        userId: 9,
        name: "Reminder 9",
        detail: "Your flight is scheduled on 2025-09-22 at 06:30 AM.",
      },
      {
        userId: 10,
        name: "Reminder 10",
        detail: "Your flight is scheduled on 2025-10-01 at 09:45 AM.",
      },
      {
        userId: 11,
        name: "Reminder 11",
        detail: "Your flight is scheduled on 2025-11-18 at 07:00 AM.",
      },
      {
        userId: 12,
        name: "Reminder 12",
        detail: "Your flight is scheduled on 2025-12-25 at 16:30 PM.",
      },
      {
        userId: 13,
        name: "Reminder 13",
        detail: "Your flight is scheduled on 2026-01-03 at 12:00 PM.",
      },
      {
        userId: 14,
        name: "Reminder 14",
        detail: "Your flight is scheduled on 2026-02-09 at 10:15 AM.",
      },
      {
        userId: 15,
        name: "Reminder 15",
        detail: "Your flight is scheduled on 2026-03-12 at 18:00 PM.",
      },
    ],
  });
  console.log("Notifications created:", notifications);

  const airlines = await prisma.airlines.createMany({
    data: [
      { name: "Garuda Indonesia" },
      { name: "Lion Air" },
      { name: "AirAsia" },
      { name: "Los Angeles Airlines" },
      { name: "Philippine Airlines" },
      { name: "Emirates" },
      { name: "Singapore Airlines" },
      { name: "Cathay Pacific" },
      { name: "Qatar Airways" },
      { name: "Turkish Airlines" },
      { name: "Japan Airlines" },
      { name: "KLM Royal Dutch Airlines" },
      { name: "American Airlines" },
      { name: "Delta Airlines" },
      { name: "British Airways" },
    ],
  });
  console.log("Airlines created:", airlines);

  const cities = await prisma.city.createMany({
    data: [
      { shortname: "CGK", fullname: "Jakarta" },
      { shortname: "SUB", fullname: "Surabaya" },
      { shortname: "DPS", fullname: "Denpasar" },
      { shortname: "LAX", fullname: "Los Angeles" },
      { shortname: "MNL", fullname: "Manila" },
      { shortname: "BKK", fullname: "Bangkok" },
      { shortname: "SIN", fullname: "Singapore" },
      { shortname: "HKG", fullname: "Hong Kong" },
      { shortname: "SYD", fullname: "Sydney" },
      { shortname: "LHR", fullname: "London" },
      { shortname: "NYC", fullname: "New York City" },
      { shortname: "LAX", fullname: "Los Angeles" },
      { shortname: "PAR", fullname: "Paris" },
      { shortname: "TOK", fullname: "Tokyo" },
      { shortname: "MEL", fullname: "Melbourne" },
    ],
  });
  console.log("Cities created:", cities);

  const airports = await prisma.airports.createMany({
    data: [
      {
        name: "Soekarno-Hatta International Airport",
        cityId: 1,
        terminal: "T3",
        continent: "Asia",
      },
      {
        name: "Juanda International Airport",
        cityId: 2,
        terminal: "T1",
        continent: "Asia",
      },
      {
        name: "Ngurah Rai International Airport",
        cityId: 3,
        terminal: "T2",
        continent: "Asia",
      },
      {
        name: "Los Angeles Airport",
        cityId: 4,
        terminal: "T4",
        continent: "America",
      },
      {
        name: "Ninoy Aquino International Airport",
        cityId: 5,
        terminal: "T4",
        continent: "Asia",
      },
      {
        name: "Bangkok Suvarnabhumi Airport",
        cityId: 6,
        terminal: "T1",
        continent: "Asia",
      },
      {
        name: "Singapore Changi Airport",
        cityId: 7,
        terminal: "T3",
        continent: "Asia",
      },
      {
        name: "Hong Kong International Airport",
        cityId: 8,
        terminal: "T2",
        continent: "Asia",
      },
      {
        name: "Sydney Kingsford Smith Airport",
        cityId: 9,
        terminal: "T1",
        continent: "Australia",
      },
      {
        name: "London Heathrow Airport",
        cityId: 10,
        terminal: "T5",
        continent: "Europe",
      },
      {
        name: "New York John F. Kennedy International Airport",
        cityId: 11,
        terminal: "T1",
        continent: "America",
      },
      {
        name: "Paris Charles de Gaulle Airport",
        cityId: 12,
        terminal: "T2E",
        continent: "Europe",
      },
      {
        name: "Tokyo Narita International Airport",
        cityId: 13,
        terminal: "T1",
        continent: "Asia",
      },
      {
        name: "Melbourne Tullamarine Airport",
        cityId: 14,
        terminal: "T4",
        continent: "Australia",
      },
      {
        name: "Dubai International Airport",
        cityId: 15,
        terminal: "T3",
        continent: "Asia",
      },
    ],
  });
  console.log("Airports created:", airports);

  const flights = await prisma.flight.createMany({
    data: [
      {
        airlinesId: 1,
        airportId: 1,
        departure: new Date("2025-01-04T07:30:00Z"), // Sesuai dengan Reminder 1
        return: new Date("2025-01-04T12:00:00Z"),
        price: 1000000.0,
        capacity: 180,
        class: "Economy",
        information: "Direct flight",
        duration: 120,
        originCityId: 1,
        destinationCityId: 2,
      },
      {
        airlinesId: 2,
        airportId: 2,
        departure: new Date("2025-02-01T10:00:00Z"), // Sesuai dengan Reminder 2
        return: new Date("2025-02-01T14:30:00Z"),
        price: 2000000.0,
        capacity: 150,
        class: "Business",
        information: "Connecting flight via Surabaya",
        duration: 270,
        originCityId: 3,
        destinationCityId: 4,
      },
      {
        airlinesId: 3,
        airportId: 3,
        departure: new Date("2025-03-01T09:00:00Z"), // Sesuai dengan Reminder 3
        return: new Date("2025-03-01T14:00:00Z"),
        price: 1250000.0,
        capacity: 160,
        class: "Premium Economy",
        information: "Direct flight",
        duration: 300,
        originCityId: 2,
        destinationCityId: 4,
      },
      {
        airlinesId: 4,
        airportId: 4,
        departure: new Date("2025-04-01T13:00:00Z"), // Sesuai dengan Reminder 4
        return: new Date("2025-04-01T18:30:00Z"),
        price: 2500000.0,
        capacity: 200,
        class: "First Class",
        information: "International flight",
        duration: 330,
        originCityId: 4,
        destinationCityId: 5,
      },
      {
        airlinesId: 5,
        airportId: 5,
        departure: new Date("2025-05-20T05:30:00Z"), // Sesuai dengan Reminder 5
        return: new Date("2025-05-20T09:30:00Z"),
        price: 1000000.0,
        capacity: 100,
        class: "Economy",
        information: "Budget airline flight",
        duration: 240,
        originCityId: 1,
        destinationCityId: 3,
      },
      {
        airlinesId: 1,
        airportId: 1,
        departure: new Date("2025-06-10T08:00:00Z"),
        return: new Date("2025-06-10T12:30:00Z"),
        price: 1500000.0,
        capacity: 180,
        class: "Economy",
        information: "Direct flight",
        duration: 180,
        originCityId: 2,
        destinationCityId: 3,
      },
      {
        airlinesId: 2,
        airportId: 2,
        departure: new Date("2025-07-15T09:30:00Z"),
        return: new Date("2025-07-15T14:00:00Z"),
        price: 2100000.0,
        capacity: 160,
        class: "Business",
        information: "Connecting flight via Jakarta",
        duration: 320,
        originCityId: 4,
        destinationCityId: 1,
      },
      {
        airlinesId: 3,
        airportId: 3,
        departure: new Date("2025-08-25T10:00:00Z"),
        return: new Date("2025-08-25T15:30:00Z"),
        price: 1300000.0,
        capacity: 200,
        class: "Premium Economy",
        information: "Direct flight",
        duration: 150,
        originCityId: 5,
        destinationCityId: 2,
      },
      {
        airlinesId: 4,
        airportId: 4,
        departure: new Date("2025-09-05T14:00:00Z"),
        return: new Date("2025-09-05T18:00:00Z"),
        price: 2200000.0,
        capacity: 180,
        class: "First Class",
        information: "International flight",
        duration: 300,
        originCityId: 1,
        destinationCityId: 4,
      },
      {
        airlinesId: 5,
        airportId: 5,
        departure: new Date("2025-10-12T06:00:00Z"),
        return: new Date("2025-10-12T10:30:00Z"),
        price: 1100000.0,
        capacity: 140,
        class: "Economy",
        information: "Budget airline flight",
        duration: 220,
        originCityId: 3,
        destinationCityId: 5,
      },
      {
        airlinesId: 1,
        airportId: 1,
        departure: new Date("2025-11-01T13:30:00Z"),
        return: new Date("2025-11-01T18:00:00Z"),
        price: 1600000.0,
        capacity: 180,
        class: "Economy",
        information: "Direct flight",
        duration: 210,
        originCityId: 2,
        destinationCityId: 4,
      },
      {
        airlinesId: 2,
        airportId: 2,
        departure: new Date("2025-12-15T11:00:00Z"),
        return: new Date("2025-12-15T15:30:00Z"),
        price: 2400000.0,
        capacity: 170,
        class: "Business",
        information: "Connecting flight via Surabaya",
        duration: 280,
        originCityId: 4,
        destinationCityId: 3,
      },
      {
        airlinesId: 3,
        airportId: 3,
        departure: new Date("2025-12-30T08:30:00Z"),
        return: new Date("2025-12-30T13:00:00Z"),
        price: 1450000.0,
        capacity: 150,
        class: "Premium Economy",
        information: "Direct flight",
        duration: 230,
        originCityId: 1,
        destinationCityId: 5,
      },
      {
        airlinesId: 4,
        airportId: 4,
        departure: new Date("2026-01-01T12:00:00Z"),
        return: new Date("2026-01-01T16:30:00Z"),
        price: 2500000.0,
        capacity: 200,
        class: "First Class",
        information: "International flight",
        duration: 360,
        originCityId: 5,
        destinationCityId: 2,
      },
      {
        airlinesId: 5,
        airportId: 5,
        departure: new Date("2026-02-15T09:00:00Z"),
        return: new Date("2026-02-15T13:00:00Z"),
        price: 1200000.0,
        capacity: 140,
        class: "Economy",
        information: "Budget airline flight",
        duration: 200,
        originCityId: 3,
        destinationCityId: 4,
      },
    ],
  });
  console.log("Flights created:", flights);

  const passengers = await prisma.passenger.createMany({
    data: [
      {
        firstName: "Steve",
        lastName: "Fox",
        birthDate: new Date("1990-05-10"),
        nationality: "Indonesian",
        passportNumber: "A1234567",
        passportExpiry: new Date("2030-05-10"),
      },
      {
        firstName: "Reina",
        lastName: "Mishima",
        birthDate: new Date("1985-07-20"),
        nationality: "Japan",
        passportNumber: "B9876543",
        passportExpiry: new Date("2028-07-20"),
      },
      {
        firstName: "Mark",
        lastName: "Smith",
        birthDate: new Date("1980-12-15"),
        nationality: "Malaysian",
        passportNumber: "C7654321",
        passportExpiry: new Date("2027-12-15"),
      },
      {
        firstName: "Bryan",
        lastName: "Fury",
        birthDate: new Date("1995-03-25"),
        nationality: "American",
        passportNumber: "D5678901",
        passportExpiry: new Date("2032-03-25"),
      },
      {
        firstName: "Claudio",
        lastName: "Serafino",
        birthDate: new Date("1992-09-05"),
        nationality: "Australian",
        passportNumber: "E3456789",
        passportExpiry: new Date("2029-09-05"),
      },
      {
        firstName: "Jin",
        lastName: "Kazama",
        birthDate: new Date("1993-04-22"),
        nationality: "Indonesian",
        passportNumber: "F1234568",
        passportExpiry: new Date("2032-04-22"),
      },
      {
        firstName: "Ling",
        lastName: "Xioyu",
        birthDate: new Date("1988-01-18"),
        nationality: "American",
        passportNumber: "G2345679",
        passportExpiry: new Date("2030-01-18"),
      },
      {
        firstName: "Hwoarang",
        lastName: "Sero",
        birthDate: new Date("1994-06-30"),
        nationality: "Mexican",
        passportNumber: "H3456780",
        passportExpiry: new Date("2028-06-30"),
      },
      {
        firstName: "Phaul",
        lastName: "Phoenix",
        birthDate: new Date("1991-08-10"),
        nationality: "Spanish",
        passportNumber: "I4567891",
        passportExpiry: new Date("2029-08-10"),
      },
      {
        firstName: "Nina",
        lastName: "Williams",
        birthDate: new Date("1986-10-15"),
        nationality: "Chinese",
        passportNumber: "J5678902",
        passportExpiry: new Date("2031-10-15"),
      },
      {
        firstName: "Asuka",
        lastName: "Kazama",
        birthDate: new Date("1998-02-28"),
        nationality: "American",
        passportNumber: "K6789013",
        passportExpiry: new Date("2034-02-28"),
      },
      {
        firstName: "Kazuya",
        lastName: "Mishima",
        birthDate: new Date("1990-12-05"),
        nationality: "Indian",
        passportNumber: "L7890124",
        passportExpiry: new Date("2027-12-05"),
      },
      {
        firstName: "Heihachi",
        lastName: "Mishima",
        birthDate: new Date("1993-11-17"),
        nationality: "Canadian",
        passportNumber: "M8901235",
        passportExpiry: new Date("2029-11-17"),
      },
      {
        firstName: "Lars",
        lastName: "Alexanderson",
        birthDate: new Date("1997-05-08"),
        nationality: "Australian",
        passportNumber: "N9012346",
        passportExpiry: new Date("2031-05-08"),
      },
      {
        firstName: "Alisha",
        lastName: " Bosconovitch",
        birthDate: new Date("1994-03-12"),
        nationality: "New Zealander",
        passportNumber: "O0123457",
        passportExpiry: new Date("2028-03-12"),
      },
    ],
  });
  console.log("Passengers created:", passengers);

  const seats = await prisma.seat.createMany({
    data: [
      { flightId: 1, passengerId: 1, status: "available", seatNumber: "1A" },
      { flightId: 1, passengerId: 2, status: "available", seatNumber: "1B" },
      { flightId: 1, passengerId: 3, status: "available", seatNumber: "1C" },
      { flightId: 1, passengerId: 4, status: "available", seatNumber: "2A" },
      { flightId: 1, passengerId: 5, status: "available", seatNumber: "2B" },
      { flightId: 2, passengerId: 6, status: "available", seatNumber: "1A" },
      { flightId: 2, passengerId: 7, status: "available", seatNumber: "1B" },
      { flightId: 2, passengerId: 8, status: "available", seatNumber: "1C" },
      { flightId: 2, passengerId: 9, status: "available", seatNumber: "2A" },
      { flightId: 2, passengerId: 10, status: "available", seatNumber: "2B" },
      { flightId: 3, passengerId: 11, status: "available", seatNumber: "1A" },
      { flightId: 3, passengerId: 12, status: "available", seatNumber: "1B" },
      { flightId: 3, passengerId: 13, status: "available", seatNumber: "1C" },
      { flightId: 3, passengerId: 14, status: "available", seatNumber: "2A" },
      { flightId: 3, passengerId: 15, status: "available", seatNumber: "2B" },
    ],
  });
  console.log("Seats created:", seats);

  const bookings = await prisma.booking.createMany({
    data: [
      {
        userId: 1,
        flightId: 1,
        bookingDate: new Date("2024-12-20T08:00:00Z"),
        totalPrice: 1000000,
        totalPassenger: 1,
      },
      {
        userId: 2,
        flightId: 2,
        bookingDate: new Date("2024-12-21T09:30:00Z"),
        totalPrice: 4000000,
        totalPassenger: 2,
      },
      {
        userId: 3,
        flightId: 3,
        bookingDate: new Date("2024-12-22T11:45:00Z"),
        totalPrice: 3750000,
        totalPassenger: 3,
      },
      {
        userId: 4,
        flightId: 4,
        bookingDate: new Date("2024-12-23T14:15:00Z"),
        totalPrice: 10000000,
        totalPassenger: 4,
      },
      {
        userId: 5,
        flightId: 5,
        bookingDate: new Date("2024-12-24T16:00:00Z"),
        totalPrice: 7500000,
        totalPassenger: 5,
      },
      {
        userId: 1,
        flightId: 2,
        bookingDate: new Date("2024-12-20T10:00:00Z"),
        totalPrice: 4000000,
        totalPassenger: 2,
      },
      {
        userId: 2,
        flightId: 3,
        bookingDate: new Date("2024-12-21T11:30:00Z"),
        totalPrice: 3750000,
        totalPassenger: 1,
      },
      {
        userId: 3,
        flightId: 4,
        bookingDate: new Date("2024-12-22T12:00:00Z"),
        totalPrice: 10000000,
        totalPassenger: 3,
      },
      {
        userId: 4,
        flightId: 5,
        bookingDate: new Date("2024-12-23T13:00:00Z"),
        totalPrice: 7500000,
        totalPassenger: 4,
      },
      {
        userId: 5,
        flightId: 1,
        bookingDate: new Date("2024-12-24T14:30:00Z"),
        totalPrice: 1000000,
        totalPassenger: 5,
      },
      {
        userId: 1,
        flightId: 3,
        bookingDate: new Date("2024-12-20T15:00:00Z"),
        totalPrice: 3750000,
        totalPassenger: 2,
      },
      {
        userId: 2,
        flightId: 4,
        bookingDate: new Date("2024-12-21T16:00:00Z"),
        totalPrice: 10000000,
        totalPassenger: 1,
      },
      {
        userId: 3,
        flightId: 5,
        bookingDate: new Date("2024-12-22T17:00:00Z"),
        totalPrice: 7500000,
        totalPassenger: 2,
      },
      {
        userId: 4,
        flightId: 2,
        bookingDate: new Date("2024-12-23T18:00:00Z"),
        totalPrice: 4000000,
        totalPassenger: 1,
      },
      {
        userId: 5,
        flightId: 3,
        bookingDate: new Date("2024-12-24T19:30:00Z"),
        totalPrice: 3750000,
        totalPassenger: 3,
      },
    ],
  });
  console.log("Bookings created:", bookings);

  const bookingPassenger = await prisma.bookingPassenger.createMany({
    data: [
      { bookingId: 1, passengerId: 1, seatId: 1 },
      { bookingId: 2, passengerId: 2, seatId: 2 },
      { bookingId: 3, passengerId: 3, seatId: 3 },
      { bookingId: 4, passengerId: 4, seatId: 4 },
      { bookingId: 5, passengerId: 5, seatId: 5 },
      { bookingId: 6, passengerId: 1, seatId: 6 },
      { bookingId: 7, passengerId: 2, seatId: 7 },
      { bookingId: 8, passengerId: 3, seatId: 8 },
      { bookingId: 9, passengerId: 4, seatId: 9 },
      { bookingId: 10, passengerId: 5, seatId: 10 },
      { bookingId: 11, passengerId: 1, seatId: 11 },
      { bookingId: 12, passengerId: 2, seatId: 12 },
      { bookingId: 13, passengerId: 3, seatId: 13 },
      { bookingId: 14, passengerId: 4, seatId: 14 },
      { bookingId: 15, passengerId: 5, seatId: 15 },
    ],
  });
  console.log("Booking Passengers created:", bookingPassenger);
}

/*
  const bookingPassenger = await prisma.bookingPassenger.create({
    data: {
      bookingId: booking.id,
      passengerId: passenger.id,
      seatId: seat.id,
    },
  });
  console.log("Booking Passenger created:", bookingPassenger);
*/

main()
  .catch((e) => {
    console.error("Error occurred:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
